const axios = require('axios');
const FtpRepoService = require('../services/FtpRepoService'); // Ajuste o caminho para o arquivo da classe FtpRepoService

module.exports = {
  /**
   * Processes the request for the Video FaceSwap API.
   * @param {string} prompt - Placeholder for prompt, not used here.
   * @param {string} model - Model to be used, if applicable.
   * @param {Object} modelParameters - Parameters required for the request.
   * @returns {Promise<Object>} - Response formatted with the `responseKey`.
   */
  async process(prompt, model, modelParameters = {}) {
    
    modelParameters = modelParameters || {};

    const responseKey = modelParameters.responseKey || 'videoFaceSwapResult';

    try {
      // Fetch the API Key from parameters or environment variables
      const apiKey = modelParameters.api_key || process.env.VIDEO_FACESWAP_API_KEY;
      if (!apiKey) {
        throw new Error('API key is required and must be provided as a parameter or environment variable VIDEO_FACESWAP_API_KEY.');
      }

      // Define the API endpoint
      const endpoint = 'https://api.segmind.com/v1/videofaceswap';

      // Build the payload
      const payload = {
        source_img: modelParameters.source_img,
        video_input: modelParameters.video_input,
        face_restore: modelParameters.face_restore || true,
        input_faces_index: modelParameters.input_faces_index || 0,
        source_faces_index: modelParameters.source_faces_index || 0,
        face_restore_visibility: modelParameters.face_restore_visibility || 1,
        codeformer_weight: modelParameters.codeformer_weight || 0.95,
        detect_gender_input: modelParameters.detect_gender_input || 'no',
        detect_gender_source: modelParameters.detect_gender_source || 'no',
        frame_load_cap: modelParameters.frame_load_cap || 0,
        base_64: true, // Ensure API returns video in Base64 for ImageRepo
      };

      // Define headers
      const headers = {
        'x-api-key': apiKey,
        'Content-Type': 'application/json',
      };

      console.log('Sending request to Video FaceSwap API...');
      console.log('Payload:', JSON.stringify(payload, null, 2));

      // Make the API request
      const response = await axios.post(endpoint, payload, { headers });

      // Verify and process the response
      if (response.status === 200 && response.data && response.data.video) {
        console.log('Request successful. Uploading video to ImageRepo...');

        const config = {ftpHost:'ftp.travelzviagensturismo.com',ftpPort:21,ftpUser:'pddidg3z',ftpPassword:'q9VB0fdr28',baseDomain:'https://travelzviagensturismo.com',rootDir:'/public_html/'};
        // Instancia o servi√ßo de FTP
        const ftpRepoService = new FtpRepoService(config);

        // Save the video in the ImageRepo
        const savedVideo = await ftpRepoService.createImage(
          response.data.video, // Base64 video content
          {
            description: 'Video generated by Video FaceSwap API',
            tags: ['videofaceswap', 'AI', 'FaceSwapVideo'],
            targetFolder:'videorepo'
          }, // Metadata
          '.mp4', // File extension
          null, // ImageRepo API Key
          null, // FTP configuration
          true // Content is in Base64
        );

        // Return the formatted response
        return {
          [responseKey]: {
            success: true,
            data: savedVideo,
          },
        };
      } else {
        throw new Error('The Video FaceSwap API did not return a valid video.');
      }
    } catch (error) {
      console.error('Error in Video FaceSwap API integration:', error);

      // Return error response with the responseKey
      return {
        [responseKey]: {
          success: false,
          error: error.message,
          details: error.response?.data || null,
        },
      };
    }
  },
};
